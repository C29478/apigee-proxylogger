package com.abnamro.openbankingplatform;

import org.json.simple.JSONArray;
import org.json.simple.JSONObject;

import com.apigee.flow.execution.ExecutionContext;
import com.apigee.flow.execution.ExecutionResult;
import com.apigee.flow.execution.spi.Execution;
import com.apigee.flow.message.MessageContext;


public class Logger implements Execution {
	
	/**
	 * Stores the variables in a log object
	 * 
	 * The initializer has already executed so this methods first gets the
         * variables that need to be logged (logVariables) and the object containing
         * the variables collected thusfar (log)
	 *
	 * @param messageContext
	 * @param executionResult 
	 * @return ExecutionResult containing status of the execution
         */
	public ExecutionResult execute(MessageContext messageContext, ExecutionContext executionContext) {
		
		try {
			String[] logVariables = this.gatherLogVariables(messageContext);
			JSONArray log = this.gatherLog(messageContext); 
			
			JSONObject job = new JSONObject();

			// following for loop should be in private method!

			for(int i=0; i<logVariables.length; i++){
				job.put(logVariables[i], messageContext.getVariable(logVariables[i]));
			}

			log.add(job);
			messageContext.setVariable("events", log);

            		return ExecutionResult.SUCCESS;

		} catch (Exception e) {
			return ExecutionResult.ABORT;
		}
	}

	/** 
	 * Retrieves variables that need to be logged from the messageContext
	 *
	 * These variables are retrieved by GetLogVariables policy from environment KVM
	 *
	 * @return An Array of Strings containing names of variables to be logged
	 */
	private static String[] gatherLogVariables(MessageContext messageContext) {

		String logVariablesFromContext = messageContext.getVariable("log_variables");
		
		String[] logVariables = logVariablesFromContext.split(",");
		//

		//String[] logVariables = {"lksdjf","lsdkfj"};

		return logVariables;
	}

	/** 
	 * Retrieves the variables that were gather thusfar by the proxy
	 * 
	 * @return JSONArray containing the variables stored thusfar
	 */
	private static JSONArray gatherLog(MessageContext messageContext) {

		JSONArray log = messageContext.getVariable("events");

		// while initializer is not there lets add some dummy data 

		return log;

	}

}
